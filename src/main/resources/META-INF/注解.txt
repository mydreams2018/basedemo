@ComponentScan  扫描
@ConditionalOnBean(仅仅在当前上下文中存在某个对象时,才会实例化一个Bean)
@ConditionalOnClass(某个class位于类路径上,才会实例化一个Bean),该注解的参数对应的类必须存在,否则不解析该注解修饰的配置类
@ConditionalOnExpression(当表达式为true的时候,才会实例化一个Bean)
@ConditionalOnMissingBean(仅仅在当前上下文中不存在某个对象时,才会实例化一个Bean),该注解表示,如果存在它修饰的类的bean,则不需要再创建这个bean;可以给该注解传入参数例如@ConditionOnMissingBean(name = “example”),这个表示如果name为“example”的bean存在,这该注解修饰的代码块不执行
@ConditionalOnMissingClass(某个class类路径上不存在的时候,才会实例化一个Bean)
@ConditionalOnNotWebApplication(不是web应用)
@ConditionalOnProperty是指在application.yml里配置的属性是否为true,其他的几个都是对class的判断

@AutoConfigureAfter 在加载配置的类之后再加载当前类 必须要让这个类先被spring ioc 加载好
@Import 导入一个或多个其它类
@ImportResource  历史原因导入旧的xml配置
@Profile("dev") 指定使用环境配合配置文件使用 application-dev.yml
@Configuration(proxyBeanMethods = false)    不受spring生命周期管理 每次使用都会创新的对象.lite简化模式

@EnableConfigurationProperties(MybatisProperties.class)参考